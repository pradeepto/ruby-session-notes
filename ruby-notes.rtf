{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf230
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;}
\paperw11900\paperh16840\margl1440\margr1440\vieww20520\viewh11160\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\b\fs72 \cf0 Ruby Notes :
\b0\fs36 \
\

\b\fs48 Session 1 : Introduction
\b0\fs36 \
\
\pard\pardeftab720\sa240
\cf0 Ruby is a genuine object-oriented language. Everything you manipulate is an object, and the results of those manipulations are themselves objects.\
- model concepts from real world in your code.\
- class - combination of state and methods that use the state\
- objects - instances of class\
- code block delimiters - end\
- comments #\
- literals\
  - string literals 'foo' and "foo"  -- 
\b homework?
\b0 \
- methods \
    - def / end\
    - optional ()\
    - returns the value of the last expression evaluated\
- nil is an object and it represents nothing\
- nil is false \
- Local variables, method parameters, and method names should all start with a lowercase letter or with an underscore. \
- Global variables are prefixed with a dollar sign ($)\
- instance variables begin with an \'93at\'94 sign (@). \
- Class variables start with two \'93at\'94 signs (@@). \
- Finally, class names, module names, and constants must start with an uppercase letter.\
- multiple word identifiers are separated using _\
- multiple word module/class identifiers are in MixedCase \
- ?,=,!\
- Arrays and Hashes - index based collections, store objects, accessible using a key\
- Keys in Array are integers\
- Keys in Hash can be any Object\
- default value for any Hash key is nil\
- Symbols\
- Control Structures - if / else / els if / while / end\
- Statement modifiers\
\

\b\fs48 Session 2 : Objects and Classes\

\fs36 Objects -
\b0 \
- Objects First! Rationale. \
- What is an Object?\
- In Ruby, everything is a Object, Object is everything.\
- design objects, create objects, giving objects abilities, ask them to perform actions\
- to get something done, you ask the object to do it\
- create a generic object\
- new is a constructor, a method NOT a keyword\
- new - allocates memory, calls initialize instance method  \
- initialize method\
- before you ask the object to do something, you have to teach to object how to do it\
- teach the generic object - define method\
- to get things done send messages to the object / call methods on the object\
- obj.message (receiver.message)\
- create a more meaningful object\
- every object in Ruby has a object_id\
- respond_to? - reflection / introspection\

\b \
Classes -
\b0 \
- Class is a object, Object is a class\
- \cf2 When a new class is created (typically using class Name ... end), an object of type Class is created and assigned to a global constant (Name in this case).\cf0 \
- instance variables store the state of the objects - @foo, @bar\
- each object will have its own distinct set of instance variables, hence an unique state.\
- setters and getter methods\
- methods that let you access and manipulate the state of an object, allowing the outside world to interact with the object are called its attributes. \
- external state is exposed through attributes\
- a class defines state via attributes and behavior through methods\
- attr_reader, attr_writer, attr_accessor - create accessor methods\
- require\
- Access control : public, protected, private\
- AC is determined dynamically\
- methods are public by default, except for initialize which is always private\
- private methods, receiver is always "self"\
- public, protected and private are functions unlike C++/Java where there are keywords\
- How does puts method work?\
\

\b Container, Blocks and Iterators -\

\b0 - Array and Hashes - two collections built-in Ruby\
- Hashes - associative arrays, maps, dictionaries\
\

\b Self -
\b0 \
- Current object\
- read only\
- where instance vars are found\
- default receiver for method calls\
- What changes self\
 
\i   - method call
\i0 \
      - takes the receiver\
      - sets self as receiver\
      - looks for method in the method table (class) for that object\
      - invokes the method\
      - restores the original value of self when the method returns\
     - No receiver\
      - doesn't reset self, hence self stays the same\
      - doesn't restore self\
      - just looks up and method call\
 
\i   - Class/Module definition\

\i0      - class definition is executable code in Ruby\
 - Instance variables - look up in self\
- Context\
    - top level (main object of Object class)\
 - Singleton Classes\
  - Eigen/ghost/meta/anonymous\
  - Will be created when you add a method to an object\
  - Normal but hidden/anonymous\
  - No name\
  - only one per object\
  - created lazily when you need it.\
 - Not accessible via a constant\
 - You can't instantiate from this class\
\
\
\
}